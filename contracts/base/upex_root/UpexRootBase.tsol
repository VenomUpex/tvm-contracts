// SPDX-License-Identifier: UNLICENSED
pragma ever-solidity >= 0.62.0;

import "./UpexRootHelpers.tsol";
import "./UpexRootUpgradable.tsol";
import "../../libraries/Constants.tsol";
import "../../interfaces/IUpexOption.tsol";


abstract contract UpexRootBase is UpexRootUpgradable {
    function transferOwnership(address new_owner, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        owner = new_owner;
        emit NewOwner(meta.call_id, new_owner);
    }

    function setLauncherPubkey(uint256 pubkey, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        optionLauncherPubkey = pubkey;
        emit NewLauncherPubkey(meta.call_id, pubkey);
    }

    function setPause(bool new_state, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        paused = new_state;
        emit Pause(meta.call_id, new_state);
    }

    function receiveTokenWalletAddress(address wallet) external override {
        if (msg.sender == usdt) usdtWallet = wallet;
    }

    function addMarkets(Market[] markets, Callback.CallMeta meta) external onlyOwner reserveAndSendGas(meta) {
        for (Market _market: markets) {
            require (_market.optionTtl > _market.optionOpenDuration, Errors.BAD_INPUT);
            require (_market.winMultiplier > Constants.MULTIPLIER_DECIMALS, Errors.BAD_INPUT);
            require (_market.optionTtl > 0, Errors.BAD_INPUT);
            require (_market.optionOpenDuration > 0, Errors.BAD_INPUT);

            markets[marketCount] = _market;
            marketCount++;
            emit NewMarket(meta.call_id, _market);
        }
    }

    function updateMarket(mapping (uint32 => Market) markets, Callback.CallMeta meta) external view onlyOwner reserveAndSendGas(meta) {
        for ((uint32 market_id, Market _market) : markets) {
            require (_market.optionTtl > _market.optionOpenDuration, Errors.BAD_INPUT);
            require (_market.winMultiplier > Constants.MULTIPLIER_DECIMALS, Errors.BAD_INPUT);
            require (_market.optionTtl > 0, Errors.BAD_INPUT);
            require (_market.optionOpenDuration > 0, Errors.BAD_INPUT);

            require (markets.exists(market_id), Errors.BAD_INPUT);
            Market old_market = markets[market_id];
            old_market.ticker = _market.ticker;
            old_market.winMultiplier = _market.winMultiplier;
            old_market.optionTtl = _market.optionTtl;
            old_market.optionOpenDuration = _market.optionOpenDuration;
            markets[market_id] = old_market;
            emit UpdateMarket(meta.call_id, market_id, _market);
        }
    }

    // @dev Yes, we manually set price for option, because there is no oracle services at the moment
    // On mainnet we can connect it to chainlink (for example through bridge) or whatever
    // @notice Close current option and launch new one
    function launchNewOption(uint32 market_id, uint128 market_price) external {
        require (markets.exists(market_id), Errors.BAD_INPUT);
        Market _market = markets[market_id];
        // its too early for new option
        require (_market.curOptionStart + _market.optionTtl < now, Errors.OPTION_ALREADY_OPENED);
        // owner or special bot
        require (msg.sender == owner || msg.pubkey() == optionLauncherPubkey, Errors.NOT_OWNER);
        if (msg.sender.value == 0) tvm.accept(); // looks like we have external call from our bot
        if (msg.sender.value > 0) require (msg.value >= Gas.MIN_MSG_VALUE, Errors.LOW_MSG_VALUE);

        tvm.rawReserve(math.max(address(this).balance - Gas.MIN_MSG_VALUE, CONTRACT_MIN_BALANCE), 0);

        _market.curOptionId += 1;
        _market.curOptionStart = now;

        markets[market_id] = _market;

        _deployUpexOption(
            market_id,
            _market,
            market_price
        );

        // close old one
        IUpexOption(getUpexOptionAddress(_market.curOptionId - 1, market_id)).setClosePrice{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            market_price
        );
    }


    function onAcceptTokensTransfer(
        address,
        uint128 amount,
        address sender,
        address,
        address remainingGasTo,
        TvmCell payload
    ) external override reserve {
        require (msg.sender == usdtWallet, Errors.NOT_TOKEN_WALLET);

        (
            uint32 market_id,
            BetDirection direction,
            uint32 call_id,
            bool correct
        ) = decodeTokenTransfer(payload);
        bool exception = !correct || !markets.exists(market_id) || paused || msg.value < Gas.MIN_MSG_VALUE;

        if (!exception) {
            exception = exception && _handleTokenTransfer(market_id, direction, amount, sender, Callback.CallMeta(call_id, remainingGasTo));
        }

        if (exception) {
            emit ActionRevert(call_id, sender);
            _transfer(msg.sender, amount, sender, payload, remainingGasTo, MsgFlag.ALL_NOT_RESERVED);
        }
    }

    function _handleTokenTransfer(
        uint32 market_id,
        BetDirection bet,
        uint128 amount,
        address sender,
        Callback.CallMeta meta
    ) internal returns (bool) {
        Market _market = markets[market_id];
        // bet time is ended
        if (_market.curOptionStart + _market.optionOpenDuration < now) return false;
        usdtBalance += amount;

        req_nonce += 1;
        PendingCommit commit = PendingCommit(market_id, _market.curOptionId, bet, amount, sender, meta);
        pendingCommits[req_nonce] = commit;

        IUpexAccount(getUpexAccountAddress(sender)).process_saveCommit{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            req_nonce,
            commit
        );
        return true;
    }

    function revert_saveCommit(address user, uint32 req_nonce) external reserve onlyUpexAccount(user) override {
        PendingCommit commit = pendingCommits[req_nonce];
        delete pendingCommits[req_nonce];
        usdtBalance -= commit.amount;

        TvmCell empty;
        emit ActionRevert(commit.meta.call_id, commit.user);
        _transfer(
            usdtWallet,
            commit.amount,
            commit.user,
            empty,
            commit.meta.send_gas_to,
            MsgFlag.ALL_NOT_RESERVED
        );
    }

    function finish_saveCommit(address user, uint32 req_nonce) external reserve onlyUpexAccount(user) override {
        PendingCommit commit = pendingCommits[req_nonce];
        delete pendingCommits[req_nonce];

        emit CommitSaved(commit.meta.call_id, commit);
        commit.meta.send_gas_to.transfer(0, false, MsgFlag.ALL_NOT_RESERVED);
    }

    function claimReward(uint32 option_id, uint32 market_id, Callback.CallMeta meta) external view reserve {
        require (msg.value >= Gas.MIN_MSG_VALUE, Errors.LOW_MSG_VALUE);
        require (markets.exists(market_id), Errors.BAD_INPUT);

        Market _market = markets[market_id];
        require (option_id <= _market.curOptionId, Errors.BAD_INPUT);

        IUpexOption(getUpexOptionAddress(option_id, market_id)).process_claimReward{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
            msg.sender,
            meta
        );
    }

    function option_revert_claimReward(
        address user, uint32 market_id, uint32 option_id, Callback.CallMeta meta
    ) external view reserveAndSendGas(meta) onlyUpexOption(option_id, market_id) override {
        emit ActionRevert(meta.call_id, user);
    }

    function account_revert_claimReward(
        address user, Callback.CallMeta meta
    ) external view reserveAndSendGas(meta) onlyUpexAccount(user) override {
        emit ActionRevert(meta.call_id, user);
    }

    function finish_claimReward(
        address user, uint128 win_amount, Callback.CallMeta meta
    ) external reserve onlyUpexAccount(user) override {
        // we suggest we always have enough balance to pay
        usdtBalance -= win_amount;

        TvmCell empty;
        emit RewardClaim(meta.call_id, user, win_amount);
        _transfer(
            usdtWallet,
            win_amount,
            user,
            empty,
            meta.send_gas_to,
            MsgFlag.ALL_NOT_RESERVED
        );
    }

    onBounce(TvmSlice slice) external {
        tvm.accept();

        uint32 functionId = slice.decode(uint32);

        // if processing failed - contract was not deployed. Deploy and try again
        if (functionId == tvm.functionId(IUpexAccount.process_saveCommit)) {
            tvm.rawReserve(_reserve(), 0);
            uint32 _request_nonce = slice.decode(uint32);
            PendingCommit _commit = pendingCommits[_request_nonce];
            delete pendingCommits[_request_nonce];

            address upex_acc = _deployUpexAccount(_commit.user);
            IUpexAccount(upex_acc).process_saveCommit{value: 0, flag: MsgFlag.ALL_NOT_RESERVED}(
                _request_nonce, _commit
            );
        }
    }
}
